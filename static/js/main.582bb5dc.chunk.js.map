{"version":3,"sources":["Header.js","components/Card.js","components/CardList.js","components/Showdown.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Header","onZipCodeChange","onZipCodeSubmit","handleKeyPress","href","type","placeholder","onChange","onKeyDown","onClick","Card","id","name","image","rating","url","determineWinner","businessFaceOff","round","className","src","alt","target","rel","split","CardList","businesses","slice","length","map","business","i","image_url","Showdown","Home","advancingBusinesses","App","useState","zipCode","setZipCode","setBusinesses","winningBusinesses","setWinningBusinesses","setRound","mounted","useRef","useEffect","current","bearer","process","corsAnywhere","randomOffset","Math","floor","random","test","isValidZipCode","alert","fetch","method","headers","Authorization","then","response","json","data","shuffleArray","result","array","n","splitArrayBy","j","splice","removeBusinessFromArray","businessIds","filter","includes","winner","obj","push","event","value","keyCode","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.582bb5dc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = ({ onZipCodeChange, onZipCodeSubmit, handleKeyPress }) => (\r\n  <header>\r\n    <a href='https://aalieu.github.io/food-showdown/'>Food Showdown üçΩÔ∏è</a>\r\n    <input\r\n      type='text'\r\n      placeholder='Enter Zip Code'\r\n      onChange={onZipCodeChange}\r\n      onKeyDown={handleKeyPress}\r\n    />\r\n    <button onClick={onZipCodeSubmit}>Submit</button>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Card = ({\r\n  id,\r\n  name,\r\n  image,\r\n  rating,\r\n  url,\r\n  determineWinner,\r\n  businessFaceOff,\r\n  round,\r\n}) => {\r\n  return (\r\n    <div className='card'>\r\n      <img className='cardImage' src={image} alt='restaurant' />\r\n      <div className='card-body'>\r\n        <h5 className='cardTitle'>{name}</h5>\r\n        <p className='cardRating'>Rating: {rating}/5</p>\r\n        <a\r\n          target='_blank'\r\n          rel='noopener noreferrer'\r\n          href={url}\r\n          className='cardLink'\r\n        >\r\n          {url.split('?')[0]}\r\n        </a>\r\n        <div>\r\n          <button\r\n            className='likeBtn'\r\n            onClick={() => determineWinner(id, businessFaceOff, round)}\r\n          >\r\n            ‚ù§Ô∏è\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ businesses, determineWinner, round }) => {\r\n  const businessFaceOff = businesses.slice(0, 2);\r\n  return (\r\n    <div className='cardList'>\r\n      {round === 'WINNER' ? (\r\n        <h1>WINNER!!!</h1>\r\n      ) : round === 'FINALS' ? (\r\n        <h1>{round}: SELECT YOUR WINNER</h1>\r\n      ) : (\r\n        <h1>\r\n          {round}: Select {businesses.length / 2} more winner(s)!\r\n        </h1>\r\n      )}\r\n      {businesses[1] ? (\r\n        businessFaceOff.map((business, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={businesses[i].id}\r\n              name={businesses[i].name}\r\n              image={businesses[i].image_url}\r\n              url={businesses[i].url}\r\n              rating={businesses[i].rating}\r\n              determineWinner={determineWinner}\r\n              businessFaceOff={businessFaceOff}\r\n              round={round}\r\n            />\r\n          );\r\n        })\r\n      ) : (\r\n        <Card\r\n          key={businesses[0].id}\r\n          id={businesses[0].id}\r\n          name={businesses[0].name}\r\n          image={businesses[0].image_url}\r\n          url={businesses[0].url}\r\n          rating={businesses[0].rating}\r\n          determineWinner={determineWinner}\r\n          businessFaceOff={businessFaceOff}\r\n          round={round}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\nimport CardList from './CardList';\r\n\r\nconst Showdown = ({ businesses, determineWinner, round }) => {\r\n  return (\r\n    <div>\r\n      <CardList\r\n        businesses={businesses}\r\n        determineWinner={determineWinner}\r\n        round={round}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Showdown;\r\n","import React from 'react';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className='container'>\r\n      <div className='intro'>\r\n        <h2>What is Food Showdown about?</h2>\r\n        <p>\r\n          Everyone has had those moments where they think to themselves ‚Äì \"Hmm,\r\n          what should I eat today?\"\r\n        </p>\r\n        <p>\r\n          Then they go on Yelp and search for food within their area. Everything\r\n          looks good... But at the same time <em>nothing</em> looks good. Food\r\n          Showdown was created to help those who are indecisive take control of\r\n          their lives and pick what they're really feeling like eating.\r\n        </p>\r\n        <p>\r\n          <strong>May the best food win.</strong>\r\n        </p>\r\n        <h2>Tell Me More</h2>\r\n        <p>\r\n          Food Showdown utilizes the Yelp Fusion API to randomly select 16\r\n          businesses located near the zip code provided. From there, two\r\n          businesses will be pit against each other until only one more business\r\n          remains.\r\n        </p>\r\n        <p>Site is still a work in progress and thus some bugs do exist:</p>\r\n        <li>\r\n          After submitting zip code, please wait a few seconds for businesses to\r\n          load. A spinning loader is in the works.\r\n        </li>\r\n        <li>\r\n          If you would like to do another search, please refresh the page or\r\n          click on the top left to reset the page.\r\n        </li>\r\n        <li>Works in mobile, but design is not fully responsive</li>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Header from './Header';\r\nimport Showdown from './components/Showdown';\r\nimport Home from './components/Home';\r\nimport './App.css';\r\n\r\nlet advancingBusinesses = [];\r\n\r\nconst App = () => {\r\n  const [zipCode, setZipCode] = useState('');\r\n  const [businesses, setBusinesses] = useState([]);\r\n  const [winningBusinesses, setWinningBusinesses] = useState([]);\r\n  const [round, setRound] = useState('SWEET 16');\r\n\r\n  const mounted = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!mounted.current) {\r\n      mounted.current = true;\r\n    } else if (businesses.length < 1 && round === 'SWEET 16') {\r\n      advancingBusinesses = [];\r\n      setBusinesses(winningBusinesses);\r\n      setRound('QUARTERFINALS');\r\n    } else if (businesses.length < 1 && round === 'QUARTERFINALS') {\r\n      advancingBusinesses = [];\r\n      setBusinesses(winningBusinesses);\r\n      setRound('SEMIFINALS');\r\n    } else if (businesses.length < 1 && round === 'SEMIFINALS') {\r\n      advancingBusinesses = [];\r\n      setBusinesses(winningBusinesses);\r\n      setRound('FINALS');\r\n    } else if (businesses.length < 2 && round === 'FINALS') {\r\n      advancingBusinesses = [];\r\n      setBusinesses(winningBusinesses);\r\n      setRound('WINNER');\r\n    }\r\n  }, [businesses, round, winningBusinesses]);\r\n\r\n  // Monitors input field to grab zip code being entered\r\n  const onZipCodeChange = (event) => setZipCode(event.target.value);\r\n\r\n  // RegEx to check if zip code entered is valid or not\r\n  const isValidZipCode = (zipCode) => /^\\d{5}[-\\s]?(?:\\d{4})?$/gm.test(zipCode);\r\n\r\n  // On clicking submit with a valid zip code, makes a request to Yelp Fusion API with random parameters\r\n  // Once call is successful, return JSON response and run a function to randomize the order of businesses returned\r\n  // Set state to store businesses\r\n  const onZipCodeSubmit = () => {\r\n    const bearer = `Bearer ${process.env.REACT_APP_API_KEY}`;\r\n    const corsAnywhere = `${process.env.REACT_APP_CORS_ANYWHERE}`;\r\n    const randomOffset = Math.floor(Math.random() * 51);\r\n\r\n    if (isValidZipCode(zipCode)) {\r\n      fetch(\r\n        `${corsAnywhere}https://api.yelp.com/v3/businesses/search?limit=48&offset=${randomOffset}&location=${zipCode}&open_now=true`,\r\n        {\r\n          method: 'get',\r\n          headers: { Authorization: bearer },\r\n        }\r\n      )\r\n        .then((response) => response.json())\r\n        .then((data) => shuffleArray(data.businesses, 3))\r\n        .then((result) => setBusinesses(result));\r\n    } else {\r\n      alert('Not a valid zip code.');\r\n    }\r\n  };\r\n\r\n  // Allowing input submit with enter key\r\n  const handleKeyPress = (event) => {\r\n    if (event.keyCode === 13) {\r\n      onZipCodeSubmit();\r\n    }\r\n  };\r\n\r\n  // Function that takes in an array and size n and utilizes an algorithm that will shuffle the businesses in the array\r\n  const shuffleArray = (array, n) => {\r\n    const splitArrayBy = array.length / n;\r\n\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    const splicedArray = array.splice(0, splitArrayBy);\r\n    return splicedArray;\r\n  };\r\n\r\n  // Function that filters the array of businesses and removes the businesses that contain a matching id\r\n  const removeBusinessFromArray = (businessIds) =>\r\n    businesses.filter((business) => !businessIds.includes(business.id));\r\n\r\n  // Function that saves the id of winning business and pushes the business into an empty array\r\n  // At the end of each round, the array of winners will be stored in state in winningBusinesses array\r\n  // useEffect hook sets new round and sets businesses array with data stored in the winningBusinesses array\r\n  // Continue until a winner is decided\r\n  const determineWinner = (id, businessFaceOff, round) => {\r\n    const winner = businesses.filter((business) => business.id === id);\r\n    const businessIds = businessFaceOff.map((obj) => obj.id);\r\n    advancingBusinesses.push(winner[0]);\r\n\r\n    switch (round) {\r\n      case 'SWEET 16':\r\n        if (businesses.length > 3) {\r\n          setBusinesses(removeBusinessFromArray(businessIds));\r\n        } else if (businesses.length < 3) {\r\n          setBusinesses(removeBusinessFromArray(businessIds));\r\n          setWinningBusinesses(shuffleArray(advancingBusinesses, 1));\r\n        }\r\n        break;\r\n      case 'QUARTERFINALS':\r\n        if (businesses.length > 3) {\r\n          setBusinesses(removeBusinessFromArray(businessIds));\r\n        } else if (businesses.length < 3) {\r\n          setBusinesses(removeBusinessFromArray(businessIds));\r\n          setWinningBusinesses(shuffleArray(advancingBusinesses, 1));\r\n        }\r\n        break;\r\n      case 'SEMIFINALS':\r\n        if (businesses.length > 3) {\r\n          setBusinesses(removeBusinessFromArray(businessIds));\r\n        } else if (businesses.length < 3) {\r\n          setBusinesses(removeBusinessFromArray(businessIds));\r\n          setWinningBusinesses(shuffleArray(advancingBusinesses, 1));\r\n        }\r\n        break;\r\n      case 'FINALS':\r\n        setBusinesses(removeBusinessFromArray(businessIds));\r\n        setWinningBusinesses(advancingBusinesses);\r\n        break;\r\n      case 'WINNER':\r\n        setBusinesses(winningBusinesses);\r\n        break;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  // Function to render dynamic information depending on which round it is\r\n  const renderShowdown = () => {\r\n    if (!businesses[0] && round === 'SWEET 16') {\r\n      return <Home />;\r\n    } else if (businesses[1] && round === 'SWEET 16') {\r\n      return (\r\n        <Showdown\r\n          businesses={businesses}\r\n          determineWinner={determineWinner}\r\n          round={round}\r\n        />\r\n      );\r\n    } else if (businesses[1] && round === 'QUARTERFINALS') {\r\n      return (\r\n        <Showdown\r\n          businesses={businesses}\r\n          determineWinner={determineWinner}\r\n          round={round}\r\n        />\r\n      );\r\n    } else if (businesses[1] && round === 'SEMIFINALS') {\r\n      return (\r\n        <Showdown\r\n          businesses={businesses}\r\n          determineWinner={determineWinner}\r\n          round={round}\r\n        />\r\n      );\r\n    } else if (businesses[1] && round === 'FINALS') {\r\n      return (\r\n        <Showdown\r\n          businesses={businesses}\r\n          determineWinner={determineWinner}\r\n          round={round}\r\n        />\r\n      );\r\n    } else if (businesses[0] && round === 'WINNER') {\r\n      return (\r\n        <Showdown\r\n          businesses={businesses}\r\n          determineWinner={determineWinner}\r\n          round={round}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='App'>\r\n      <Header\r\n        onZipCodeChange={onZipCodeChange}\r\n        onZipCodeSubmit={onZipCodeSubmit}\r\n        handleKeyPress={handleKeyPress}\r\n      />\r\n      {renderShowdown()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}